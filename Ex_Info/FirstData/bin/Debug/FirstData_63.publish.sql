/*
Deployment script for EX_INFO

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "EX_INFO"
:setvar DefaultFilePrefix "EX_INFO"
:setvar DefaultDataPath "C:\Users\40732\AppData\Local\Microsoft\VisualStudio\SSDT\"
:setvar DefaultLogPath "C:\Users\40732\AppData\Local\Microsoft\VisualStudio\SSDT\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[Table2].[Student_id] on table [dbo].[Table2] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[Table2])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Starting rebuilding table [dbo].[Table2]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Table2] (
    [Id]         INT IDENTITY (1, 1) NOT NULL,
    [Student_id] INT NOT NULL,
    [not1]       INT NULL,
    [not2]       INT NULL,
    [not3]       INT NULL,
    [not4]       INT NULL,
    [not5]       INT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Table2])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Table2] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Table2] ([Id], [not1], [not2], [not3], [not4], [not5])
        SELECT   [Id],
                 [not1],
                 [not2],
                 [not3],
                 [not4],
                 [not5]
        FROM     [dbo].[Table2]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Table2] OFF;
    END

DROP TABLE [dbo].[Table2];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Table2]', N'Table2';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Foreign Key [dbo].[student_id]...';


GO
ALTER TABLE [dbo].[Table2] WITH NOCHECK
    ADD CONSTRAINT [student_id] FOREIGN KEY ([Student_id]) REFERENCES [dbo].[Table1] ([Id]);


GO
PRINT N'Altering Procedure [dbo].[inserare]...';


GO
ALTER PROCEDURE [dbo].[inserare]
	@id int,
	@name text,
	@age int,
	@an int,
	@not1 int,
	@not2 int,
	@not3 int,
	@not4 int,
	@not5 int
AS
	INSERT INTO Table1(Name, Age, Class) VALUES(@name, @age, @an);
	INSERT INTO Table2( Student_id ,not1,not2,not3,not4,not5) VALUES(SCOPE_IDENTITY() ,@not1,@not2,@not3,@not4,@not5);
RETURN 0
GO
PRINT N'Altering Procedure [dbo].[stergere]...';


GO
ALTER PROCEDURE [dbo].[stergere]
	@id int
AS
	DELETE FROM Table1 WHERE id= @id;
	DELETE FROM Table2 WHERE Student_id = @id;
RETURN 0
GO
PRINT N'Refreshing Procedure [dbo].[medie]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[medie]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Table2] WITH CHECK CHECK CONSTRAINT [student_id];


GO
PRINT N'Update complete.';


GO
